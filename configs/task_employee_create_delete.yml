##
## Task to create new user objects in LDAP from a CSV file
##
---
ADUserMaintenance:
##
## Defines a filesystem
##
- connection: &HRFiles
    !FileConnection
    name: HR_files
    description: file location for HR files
    path: configs/

##
##  Defines an LDAP connection
##
- connection: &LDAP_RP
    !LdapConnection
    name: AD_LDAP
    description: Connection to LDAP
    url: ldaps://192.168.0.35
    credential:
      username: CN=sta_ldap,OU=testingStuff,DC=stuff,DC=things
      password: asdf345SDFg
    baseDN: DC=stuff,DC=things

##
## Defines a CSV file
## 
- query: &HREmployees
    !CsvQuery
    name: HR_Employees
    description: CSV file of employees
    connection: *HRFiles
    filename: employees.csv
    headers: no
    fields:
    - name: employeeID
      type: caseInsensitiveString
    - name: firstname
      type: caseSensitiveString
    - name: surname
      type: caseSensitiveString
    - name: startDate
      type: date
    - name: endDate
      type: date
    - name: department
    - name: role

##
## Defines an LDAP query to reference all user objects from specific OU
##
- query: &ADEmployees
    !LdapObjectQuery
    ## LDAP lookup
    name: AD_users_employees
    description: Read-write access to manage users in employee OU
    connection: *LDAP_RP
    #    subOU: OU=test employees,OU=testingStuff
    subOU: OU=testingStuff
    filter: (&(objectClass=user)(!(sAMAccountName=STA_LDAP)))
    scope: sub

##
## Defines a task that will create/update/remove user objects in LDAP
##
- task:
    !SimpleTask
    name: emplyees_create_HR_AD
    description: create AD accounts for missing employees. Account will be disabled until start date
  
    ## source and target connections (read from source, write to target):
    source: 
      query: *HREmployees
    target: 
      query: *ADEmployees

    ## Algorithm to match source users to target users:
    matchers:
    - !RegexMatcher
      name: match_employeeID
      description: Plan A - match unique employee IDs (must be unique in source and target)
      sourceSignature:
        attributes: 
        - employeeID
      targetSignature:
        attributes: 
        - employeeID
    - !RegexMatcher
      name: Match and last name
      description: Plan B - if employee ID matching doesn't match all users, try to match unique first/last names on any remaining unmatched user objects
      sourceSignature:
        attributes:
        - firstname
        - surname
      targetSignature:
        attributes:
          - givenName
          - sn
      
    ## work in progress...
    filters:
  
    ## Set these values for LDAP users:
    attributes:
    - !RegexAttribute
      ## Example: Fred Bloggs (employee ID 1234) will have dn 'Fred Bloggs (1234)'.
      attribute: distinguishedName
      sources: 
      - employeeID
      - firstname
      - surname
      # relative to connection, not query
      pattern: s/(.*):(.*):(.*)/CN=$2 $3 ($1),OU=test employees,OU=testingStuff/
      conditions:
      - CREATE
      - UPDATE

    - !RegexAttribute
      ## mothball the account - move to ex employees (do not just delete it)
      attribute: distinguishedName
      sources: 
      - cn
      # relative to connection, not query
      pattern: s/(.+)/CN=$1,OU=ex employees,OU=testingStuff/
      conditions:
      - REMOVE

    - !LiteralAttribute
      ## Set the objectClass to specific values
      attribute: objectClass
      values: 
      - user
      - top
      - person
      - organizationalPerson

    - !RegexAttribute
      attribute: displayName
      sources: 
      - firstname
      - surname
      pattern: s/(.*):(.*)/$1 $2/

    - !CopyAttribute
      attribute: sn
      source: surname

    - !CopyAttribute
      attribute: givenName
      source: firstname

    - !CopyAttribute
      attribute: employeeID
      source: employeeID

    - !RegexAttribute
      ## eg Fredd Bloggs (employee ID 1234) will have samAccountName 1223FB
      attribute: sAMAccountName
      sources: 
      - employeeID
      - firstname
      - surname
      pattern: s/(\w+):(\w)\w*:(\w).+/$1$2$3/
      ## If a user changes their name, do not update this field
      conditions:
      - CREATE

    - !RegexAttribute
      attribute: department
      sources: 
      - department
      pattern: s/(\w+)(\s?\w*)/ministry of $1$2/
      conditions:
      - CREATE
      - UPDATE

    - !RandomAttribute
      ## Generate a random password
      attribute: userPassword
      conditions:
      - CREATE
      length: 12
      characters:
      - abcde
      - ABCDE
      - 12345
        
